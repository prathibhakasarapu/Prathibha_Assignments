<!DOCTYPE HTML>
<html>
    <head>
    <title>HTML BASICS</title>
    </head>
    <body>
        <!--<p>hello<strong>coders</strong></p>
        <p>hii,this is my first <em>pages</em></p>
        <a href="about.html">the new page</a>
        <img src="img/flower.jpg" alt="a picture of flower">-->

        <h1>HTML FORMS</h1>
        <form>
            <label for="username">Enter username:</label>
            <input type="text" id="username" name="username">
            <br><br>
            <label for="email">Enter Email:</label>
            <input type="email" id="email" name="email">
            <br><br>
            <label for="password">Enter password:</label>
            <input type="password" id="password" name="password">

            <p>Select your Age:</p>
            <input type="radio" name="age" value="0-25" id="option-1">
            <label for="option=1">0-25</label>
            <br><br>
            <input type="radio" name="age" value="26-35" id="option-2">
            <label for="option=2">26-35</label>
            <br><br>
            <input type="radio" name="age" value="36-45" id="option-3">
            <label for="option=3">36-45</label>
        </form>
    </body>
</html>

2)program on forms::

<!DOCTYPE HTML>
<html>
    <head>
    <title>HTML BASICS</title>
    </head>
    <body>
        <!--<p>hello<strong>coders</strong></p>
        <p>hii,this is my first <em>pages</em></p>
        <a href="about.html">the new page</a>
        <img src="img/flower.jpg" alt="a picture of flower">-->

        <h1>HTML FORMS</h1>
        <form>
            <label for="username">Enter username:</label>
            <input type="text" id="username" name="username" required>
            <br><br>
            <label for="email">Enter Email:</label>
            <input type="email" id="email" name="email">
            <br><br>
            <label for="password">Enter password:</label>
            <input type="password" id="password" name="password">

            <p>Select your Age:</p>
            <input type="radio" name="age" value="0-25" id="option-1">
            <label for="option=1">0-25</label>
            <br><br>
            <input type="radio" name="age" value="26-35" id="option-2">
            <label for="option=2">26-35</label>
            <br><br>
            <input type="radio" name="age" value="36-45" id="option-3">
            <label for="option=3">36-45</label>

            <br><br>
            <label for="question">Security questions:</label>
            <select name="question" id="question">
                <option value="q1">what is your mother name?</option>
                <option value="q2">what is your favourite colour?</option>
                <option value="q3">what is your nationality?</option>
            </select>

            <br><br>
            <label for="answer">Security answers:</label>
            <input type="text" id="answer" name="answer">

            <br><br>
            <label for="Biography">your Biography:</label><br><br>
            <textarea name="Biography" id="Biography" cols="30" rows="10" placeholder="about you.."></textarea>

            <br><br>
            <input type="submit" value="submit the form">
        </form>
    </body>
</html>

3)CSS BASICS::
->h1{
    color:orange;
    background-color: blueviolet;
    font-size:20px;
    text-decoration:underline;
    font-family: arial;
    text-align:center;
}
p{
    color:rgb(204, 0, 255);
    text-align:center;
    line-height:30px;
    letter-spacing:3px;
    column-count:3;
    column-gap:60px;
}
ul{
    border-width: 4px;
    border-style: solid;
    border-color:crimson;
   /* border:4px solid crimson;*/
   /*border-bottom:4px solid crimson*/
}
li{
    list-style-type: none;
    text-shadow:2px 2px lightblue;
}

-><!DOCTYPE HTML>
<html>
    <head >
        <link rel="stylesheet" href="style.css">
        <title>CSS Basics</title>
    </head>
    <body>
        <h1>CSS Basics</h1>

        <p>A ninja (忍者, Japanese pronunciation: [ɲiꜜɲdʑa]) or shinobi (忍び, [ɕinobi]) was a covert 
            agent or mercenary in feudal Japan. The functions of a ninja included espionage, 
            deception, and surprise attacks. Their covert methods of waging irregular warfare 
            were deemed dishonorable and beneath the honor of the samurai.</p>

        <div>
            <h2>Employees for hire</h2>
            <p>If you're a fan of ninjas, you'll be pleased to know that ninjas were indeed real.
                Shinobi lived in Japan between the 15th and 17th Centuries.They were in two areas 
                of Japan: Iga and Koga. The regions surrounding these two villages were ruled by samurai.</p>

                <ul>
                    <li>Ninja yoshi</li>
                    <li>ninja Mario</li>
                    <li>ninja Shaun</li>
                </ul>
        </div>
    </body>
</html>
-><!DOCTYPE HTML>
<html>
    <head>
        <link rel="stylesheet" href="style.css">
        <title>CSS Basics</title>
    </head>
    <body>

        <h1>About me</h1>
        <p>Ninja (忍者) were a type of warrior who specialized in unconventional warfare such as 
            infiltration, sabotage and assassination during the age of the samurai. Another way 
            of calling them is "shinobi", meaning "those who act in stealth". Ninja employed 
            deception and forgery tactics to take opponents out by surprise.</p>
    </body>
</html>

->4)inline and block level elements::

<!DOCTYPE HTML>
<html>
    <head >
        <link rel="stylesheet" href="style.css">
        <title>CSS Basics</title>
    </head>
    <body>
       <h2>Inline elements</h2>

       <span>span tag</span>
       <em>em tag</em>
       <a href="">anchor tag</a>
       <span>span tag</span>

       <h2>Block-Level elements</h2>

       <div>div tag</div>
       <div>another div tag</div>
       <h3>h3 tag</h3>
       <p>paragraph tag</p>
       <ul>
           <li>li tag</li>
           <li>another li tag</li>
       </ul>
    </body>
</html>

->mario web page::

<html lang="en">
<head>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="stylesheet" href="/style.css">
  <title>Marioclub</title>
</head>
<body>
  <header>
    <h1>Marioclub</h1>
  </header>
  <section class="banner">
    <img src="/img/banner.png" alt="marioclub welcome banner">
    <div class="welcome">
      <h2>Welcome to <br><span>Marioclub</span></h2>
    </div>
  </section>
  <nav class="main-nav">
    <ul>
      <li><a href="/join.html" class="join">Join the club</a></li>
      <li><a href="/news.html">Latest news</a></li>
      <li><a href="/games.html">New games</a></li>
      <li><a href="/contact.html">Contact</a></li>
    </ul>
  </nav>
  <main>
    <article>
      <h2>It's a me, Mario</h2>
      <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Repudiandae possimus sapiente, ducimus asperiores error eum ipsam quasi repellendus iste earum laboriosam nesciunt officiis atque rerum quos incidunt aspernatur velit voluptates. Lorem ipsum, dolor sit amet consectetur adipisicing elit. Praesentium labore perferendis minus incidunt doloribus, eligendi repudiandae earum dignissimos est neque deserunt consequatur. Repudiandae autem maxime magnam eveniet! Atque, suscipit amet. Lorem ipsum, dolor sit amet consectetur adipisicing elit. Praesentium labore perferendis minus incidunt doloribus, eligendi repudiandae earum dignissimos est neque deserunt consequatur. Repudiandae autem maxime magnam eveniet! Atque, suscipit amet.</p>
    </article>
    <ul class="images">
      <li><img src="/img/thumb-1.png" alt="mario thumbnail 1"></li>
      <li><img src="/img/thumb-2.png" alt="mario thumbnail 2"></li>
    </ul>
  </main>
  <section class="join">
    <h2>Join Today!</h2>
    <p>Lorem ipsum dolor, sit amet consectetur adipisicing elit. Corporis dignissimos minus voluptatem.</p>
    <form>
      <input type="email" name="email" placeholder="Type email & hit enter" required>
    </form>
  </section>
  <footer>
    <p class="copyright">Copyright 2019 Marioclub</p>
  </footer>
</body>
</html>

->
body, ul, li, h1, h2, a{
  margin: 0;
  padding: 0;
  font-family: tahoma;
}
p{
  font-size: 18px;
}
header{
  background-color: #F63232;
  padding: 20px 0;
  text-align: center;
  position: fixed;
  width: 100%;
  top: 0;
  left: 0;
  z-index: 1;
}
header h1{
  color: white;
  border: 8px solid white;
  display: inline-block;
  padding: 6px 12px;
  border-radius: 36px;
}
.banner{
  position: relative;
}
.banner img{
  max-width: 100%;
}
.banner .welcome{
  background:#FEB614;
  color: white;
  padding: 30px;
  font-size: 60px;
  position: absolute;
  left: 0;
  top: 30%;
} 
.banner .welcome span{
  font-size: 1.4em;
}
nav{
  background: #F4F4F4;
  padding: 20px;
  position: sticky;
  top: 106px;
  z-index: 1;
}
nav ul{
  white-space: nowrap;
  max-width: 1200px;
  margin: 0 auto;
  text-align: center;
}
nav li{
  width: 25%;
  display: inline-block;
  font-size: 24px;
}
nav li a{
  text-decoration: none;
  color: #4B4B4B;
}
nav li a:hover{
  text-decoration: underline;
}
nav li a.join{
  color: #F63232;
}
main{
  max-width: 100%;
  width: 1200px;
  margin: 80px auto;
  padding: 0 40px;
  box-sizing: border-box;
}
article h2{
  color: #F63232;
  font-size: 48px;
}
article p{
  line-height: 2em;
  color: #4B4B4B;
}
article p::first-line{
  font-weight: bold;
  font-size: 1.2em;
}
.images{
  text-align: center;
  margin: 80px 0;
  white-space: nowrap;
}
.images li{
  display: inline-block;
  list-style-type: none;
  width: 40%;
  margin: 20px 5%;
  position: relative;
}
.images li:hover{
  top: -4px;
}
.images li img{
  max-width: 100%;
}
section.join{
  background: #F4F4F4;
  text-align: center;
  padding: 60px 20px;
  color: #4B4B4B;
}
section.join h2{
  font-size: 36px;
}
form input{
  margin: 20px 0;
  padding: 10px 20px;
  font-size: 24px;
  border-radius: 28px;
  border: 4px solid white;
}
form input:focus{
  border: 4px dashed #4B4B4B;
  outline: none;
}
form input:valid{
  border: 4px solid #71d300;
}
footer{
  background: #F63232;
  color: white;
  padding: 10px;
  text-align: center;
}

/* responsive styles */

@media screen and (max-width: 1400px){

  .banner .welcome{
    font-size: 40px;
  }

}

@media screen and (max-width: 960px){

  .banner .welcome{
    font-size: 28px;
  }
  nav li{
    font-size: 18px;
  }

}

@media screen and (max-width: 700px){

  .banner .welcome{
    font-size: 20px;
    position: relative;
    text-align: center;
  }
  .banner .welcome br{
    display: none;
  }
  .banner .welcome span{
    font-size: 1em;
  }
  nav li{
    font-size: 18px;
  }
  .images li{
    width: 100%;
    display: block;
    margin: 20px auto;
  }

}

@media screen and (max-width: 560px){

  .banner .welcome{
    font-size: 20px;
    position: relative;
    text-align: center;
  }
  .banner .welcome br{
    display: none;
  }
  .banner .welcome span{
    font-size: 1em;
  }
  nav li{
    display: block;
    width: 100%;
    margin: 12px 0;
  }
  article h2{
    font-size: 36px;
  }
  header, nav{
    position: relative;
    top: 0;
  }
  

}

->transforms(css animations)::
 
-<!DOCTYPE html>
<head>
  <title>Mario Kart Animations</title>
  <link href="styles1.css" rel="stylesheet" type="text/css">
</head>
<body>
  <div class="wrapper">
      <img src="img/cloud.png">
  </div>
</body>

-body{
   background :lightblue;
   text-align:center;
}
.wrapper{
    width:100%;
    padding:20px;
    box-sizing:border-box;
    border-color: lightgreen;
}
img{
    transform:rotateZ(60deg)
}

->mario road example::

<!DOCTYPE html>
<head>
  <title>Mario Kart Animations</title>
  <link href="styles1.css" rel="stylesheet" type="text/css">
</head>
<body>
  <div class="sky"></div>
  <div class="grass"></div>
  <div class="road">
    <div class="lines"></div>
    <img class="mario" src="img/mario.png">
  </div>
</body>


html, body{
    height: 100%;
    width:100%;
    overflow: hidden;
    margin: 0;
  }
  
  .grass, .sky, .road{
    position: relative;
  }
  
  .sky{
    height: 40%;
    background: skyblue;
  }
  
  .grass{
    height: 30%;
    background: seagreen;
  }
  
  .road{
    height: 30%;
    background: dimgrey;
    box-sizing: border-box;
    border-top: 10px solid grey;
    border-bottom: 10px solid grey;
    width: 100%;
  }
  
  .lines{
    box-sizing: border-box;
    border: 5px dashed #fff;
    height: 0px;
    width: 100%;
    position: absolute;
    top: 45%;
  }
  
  /*// ELEMENTS TO ANIMATE //*/
  .mario{
      position:absolute;
      top:-40px;
      left:0px;
      animation-name:drive;
      animation-duration:3s;
      /*animation-fill-mode: forwards;*/
      /*animation-fill-mode: backwards;*/
      animation-fill-mode: both;
      animation-delay: 0.5s;
     /* animation-iteration-count:3;*/
     animation-iteration-count:infinite;
  }
  /*// KEYFRAMES //*/
  @keyframes drive{
      from{ transform: translateX(-300px)}
      to{ transform: translateX(1530px)}
      
  }
  
->for .luigi::add this image in above html file

 .luigi{
      position:absolute;
      top:100px;
      left:0;
      animation-name: drive;
      animation-duration: 5s;
      animation-fill-mode: both;
     animation-iteration-count:infinite;
     animation-direction: alternate;

  }
->with mario and luigi::

html, body{
    height: 100%;
    width:100%;
    overflow: hidden;
    margin: 0;
  }
  
  .grass, .sky, .road{
    position: relative;
  }
  
  .sky{
    height: 40%;
    background: skyblue;
  }
  
  .grass{
    height: 30%;
    background: seagreen;
  }
  
  .road{
    height: 30%;
    background: dimgrey;
    box-sizing: border-box;
    border-top: 10px solid grey;
    border-bottom: 10px solid grey;
    width: 100%;
  }
  
  .lines{
    box-sizing: border-box;
    border: 5px dashed #fff;
    height: 0px;
    width: 100%;
    position: absolute;
    top: 45%;
  }
  
  /*// ELEMENTS TO ANIMATE //*/
  .mario{
      position:absolute;
      top:-40px;
      left:0px;
      animation-name:drive;
      animation-duration:3s;
      /*animation-fill-mode: forwards;*/
      /*animation-fill-mode: backwards;*/
      animation-fill-mode: both;
      animation-delay: 0.5s;
     /* animation-iteration-count:3;*/
     animation-iteration-count:infinite;
     /*animation-timing-function: linear or ease-in or ease-out;*/
     animation-timing-function: cubic-bezier(0.175, 0.885, 0.32, 1.275);
  }
  .luigi{
      position:absolute;
      top:100px;
      left:0;
      animation-name: drive;
      animation-duration: 5s;
      animation-fill-mode: both;
     animation-iteration-count:infinite;
     animation-direction: reverse;

  }
  /*// KEYFRAMES //*/
  @keyframes drive{
      from{ transform: translateX(-300px)}
      to{ transform: translateX(1700px)}
      
  }
  
<!DOCTYPE html>
<head>
  <title>Mario Kart Animations</title>
  <link href="styles1.css" rel="stylesheet" type="text/css">
</head>
<body>
  <div class="sky"></div>
  <div class="grass"></div>
  <div class="road">
    <div class="lines"></div>
    <img class="mario" src="img/mario.png">
    <img class="luigi" src="img/luigi.png">
  </div>
</body>

->animation shorthands,animation chaining::

<!DOCTYPE html>
<head>
  <title>Mario Kart Animations</title>
  <link href="styles1.css" rel="stylesheet" type="text/css">
</head>
<body>
  <div class="sky">
    <img class="cloud" src="img/cloud.png">
    <img class="cloud" src="img/cloud.png">
  </div>
  <div class="grass"></div>
  <div class="road">
    <div class="lines"></div>
    <img class="mario" src="img/mario.png">
    <img class="luigi" src="img/luigi.png">
  </div>
</body>

html, body{
    height: 100%;
    width:100%;
    overflow: hidden;
    margin: 0;
  }
  
  .grass, .sky, .road{
    position: relative;
  }
  
  .sky{
    height: 40%;
    background: skyblue;
  }
  
  .grass{
    height: 30%;
    background: seagreen;
  }
  
  .road{
    height: 30%;
    background: dimgrey;
    box-sizing: border-box;
    border-top: 10px solid grey;
    border-bottom: 10px solid grey;
    width: 100%;
  }
  
  .lines{
    box-sizing: border-box;
    border: 5px dashed #fff;
    height: 0px;
    width: 100%;
    position: absolute;
    top: 45%;
  }
  
  /*// ELEMENTS TO ANIMATE //*/
  .mario{
      position:absolute;
      top:-40px;
      left:0px;
      animation-name:drive;
      animation-duration:3s;
      /*animation-fill-mode: forwards;*/
      /*animation-fill-mode: backwards;*/
      animation-fill-mode: both;
      animation-delay: 0.5s;
     /* animation-iteration-count:3;*/
     animation-iteration-count:infinite;
     /*animation-timing-function: linear or ease-in or ease-out;*/
     animation-timing-function: cubic-bezier(0.175, 0.885, 0.32, 1.275);
     animation:jump 0.3s 1,2s ease; 
  }
  .luigi{
      position:absolute;
      top:100px;
      left:0;
      animation-name: drive;
      animation-duration: 5s;
      animation-fill-mode: both;
     animation-iteration-count:infinite;
     animation-direction: reverse;

  }
  .cloud{
      position:absolute;
  }
  .cloud:nth-child(1){
      width:200px;
      top:120px;
      opacity:0.5;
      animation: wind 80s linear infinite reverse;
  }
  .cloud:nth-child(2){
    width:300px;
    top:0;
    animation: wind 50s linear infinite reverse;
}
  /*// KEYFRAMES //*/
  @keyframes drive{
      from{ transform: translateX(-300px)}
      to{ transform: translateX(1700px)}
      
  }
  @keyframes wind {
      from{left:-300px}
      to{left:100%}
  }

  @keyframes jump {
      0%{top:-40px}
      50%{top:-300px}
      100%{top:-40px}
      
  }
  
->popup programs::

<!DOCTYPE html>
<head>
  <title>Pop-up Example</title>
  <link href="stylepop.css" rel="stylesheet" type="text/css">
</head>
<body class="pop-up">
  <div id="pop-up">
    <img src="img/ninja.png">
    <div class="container">
      <h1>Kung Foo Your Skills</h1>
      <p>Join the mailing list to be spammed with useless ninja tips</p>
      <input type="email" placeholder="email" required>
      <button>Hii Ya</button>
      <div class="cross">x</div>
    </div>
  </div>
</body>

/*// POP-UP BASE STYLES //*/

body{margin: 0; position: relative;}
body.pop-up{background: #222;}
*{
  font-family: Calibri, sans-serif; 
  font-weight: normal;
  color: #333;
}
h1{
  font-size: 48px;
  margin: 10px 0;
}
p{
  margin-bottom: 40px;
}
#pop-up{
  position: relative; 
  top: 200px; 
  width: 500px; 
  margin: 0 auto; 
  text-align: center;
}
#pop-up .container{
  background: #f0e4d4; 
  padding: 30px; 
  position: absolute; 
  top: 50px; 
  width: 100%; 
  box-sizing: border-box;
}
#pop-up input{
  padding: 10px;
  border: 0;
  border-radius: 10px 0 0 10px;
  border: 1px solid #333;
  font-size: 18px;
}
button{
  padding: 10px;
  border: 0;
  color: #fff;
  background: #333;
  margin-left: -5px;
  margin-left: -5px;
  border-radius: 0 10px 10px 0;
  border: 1px solid #333;
  font-size: 18px;
}
.cross{
  position: absolute;
  top: 10px;
  left: 10px;
  background: #555;
  color: #ddd;
  font-weight: bold;
  width: 22px;
  height: 22px;
  text-align: center;
  border-radius: 11px;
}

/*//POP-UP ANIMATION STYLES // */
 #pop-up{
     top:-400px;
     transform-origin: 10px 10px;
     animation: drop 0.5s ease forwards,
                swing 2s 3s ease forwards;
 }
 @keyframes drop {
     0%{opacity:0}
     70%{transform: translateY(700px)}
     100%{transform: translateY(650px); opacity:1;}
 }
 @keyframes swing {
     0%{transform: translateY(650px) rotateZ(0deg)}
     40%{transform: translateY(650px) rotateZ(90deg)}
     70%{transform: translateY(650px) rotateZ(70deg)}
     100%{transform: translateY(650px) rotateZ(75deg)}
 }

->flipping cards::

<!DOCTYPE html>
<head>
  <title>Basket Example</title>
  <link href="styleflip.css" rel="stylesheet" type="text/css">
</head>
<body>
  <div class="wrapper">
    <h1>Pick a Card</h1>
    <ul class="panels">
      <li>
        <div class="front" style="background: #267df4">Hello</div>
        <div class="back" style="background: #4c8fea">World</div>
      </li>
      <li>
        <div class="front" style="background: #9126f4">Get to</div>
        <div class="back" style="background: #a144f7">The chopper</div>
      </li>
      <li>
        <div class="front" style="background: #21bf3b">foo</div>
        <div class="back" style="background: #4dd763">bar</div>
      </li>
      <li>
        <div class="front" style="background: #c3333d">tempus</div>
        <div class="back" style="background: #e74853">fugit</div>
      </li>
      <li>
        <div class="front" style="background: #c3333d">html</div>
        <div class="back" style="background: #e74853">rocks</div>
      </li>
      <li>
        <div class="front" style="background: #21bf3b">A</div>
        <div class="back" style="background: #4dd763">B</div>
      </li>
      <li>
        <div class="front" style="background: #9126f4">Super</div>
        <div class="back" style="background: #a144f7">Mariokart</div>
      </li>
      <li>
        <div class="front" style="background: #267df4">j</div>
        <div class="back" style="background: #4c8fea">Query</div>
      </li>
    </ul>
  </div>
</body>

body{
    background: #333;
    font-family: verdana;
  }
  
  .wrapper{
    width: 100%;
    max-width: 1200px;
    margin: 40px auto;
  }
  
  h1{
    color: #fff;
    font-weight: normal;
    text-align: center;
    font-size: 48px;
  }
  
  .panels{
    list-style-type: none;
    padding: 0;
  }
  
  .panels li{
    position: relative;
    width: 25%;
    margin: 0;
    display: block;
    box-sizing: border-box;
    float: left
  }
  
  .panels li div{
    width: 100%;
    padding: 50% 0;
    text-align: center;
    color: #fff;
    font-size: 20px;
    text-transform: uppercase;
    letter-spacing: 2px;
    line-height: 0;
    cursor: pointer;
  }
  
  /*// ANIMATION STYLES //*/
  .panels div.back{
      transform:rotateY(90deg);
  }
  .panels div.front{
      position:absolute;
  }
  .panels li:hover div.front{
      animation: twirl 0.2s 0.2s ease-in forwards;

  }
  .panels li:hover div.back{
    animation: twirl 0.2s 1s ease-in forwards reverse;

}
  @keyframes twirl {
      0%{transform:rotateY(0deg)}
      100%{transform:rotateY(90deg)}
  }

->CSS GRID PROGRAMS::

-simple grid program::
 <!DOCTYPE html>
<html>
    <head>
        <title>Using CSS Grid</title>
        <style>
            body{
                color: #fff;
                font-family:'Nunito Semibold';
                text-align:center;
            }
            #content{
                display:grid;
               /* grid-template-columns: 33.3% 33.3% 33.3%;
                grid-template-columns: 1fr 1fr 1fr;*/
                grid-template-columns:repeat(3,1fr);
                max-width:960px;
                margin:0 auto;
            }
            #content div{
                background:#3bbced;
                padding:30px;
            }
            #content div:nth-child(even){
                background:#777;
            }
        </style>
    </head>
    <body>
        <div id="content">
            <div>1</div>
            <div>2</div>
            <div>3</div>
            <div>4</div>
            <div>5</div>
            <div>6</div>
            <div>7</div>
            <div>8</div>
            <div>9</div>
        </div>
    </body>
</html>
  
->gird rows and columns and grids gap simple program::

<!DOCTYPE html>
<html>
    <head>
        <title>Using CSS Grid</title>
        <style>
            body{
                color: #fff;
                font-family:'Nunito Semibold';
                text-align:center;
            }
            #content{
                display:grid;
               /* grid-template-columns: 33.3% 33.3% 33.3%;
                grid-template-columns: 1fr 1fr 1fr;*/
                grid-template-columns:repeat(3,1fr);
                grid-template-rows:repeat(3,minmax(200px,auto));
               /* grid-auto-rows:minmax(200px,auto);
               grid-gap:10px*/
               grid-column-gap:10px;
               grid-row-gap:10px;
                max-width:960px;
                margin:0 auto;
            }
            #content div{
                background:#3bbced;
                padding:30px;
            }
            #content div:nth-child(even){
                background:#777;
            }
        </style>
    </head>
    <body>
        <div id="content">
            <div>1</div>
            <div>2</div>
            <div>CSS Grid Layout excels at dividing a page into major regions or defining the relationship in terms of size, position, and layer, between parts of a control built from HTML primitives.

                Like tables, grid layout enables an author to align elements into columns and rows. However, many more layouts are either possible or easier with CSS grid than they were with tables. For example, a grid container's child elements could position themselves so they actually overlap and layer, similar to CSS positioned elements.</div>
            <div>4</div>
            <div>5</div>
            <div>6</div>
            <div>7</div>
            <div>8</div>
            <div>9</div>
        </div>
    </body>
</html>
->grid lines::
  <!DOCTYPE html>
<html>
    <head>
        <title>Using CSS Grid</title>
        <style>
            body{
                color: #fff;
                font-family:'Nunito Semibold';
                text-align:center;
            }
            #content{
                display:grid;
                grid-template-columns: repeat(6,1fr);
                grid-template-rows: repeat(4,minmax(150px,auto));
                grid-gap:10px;
                max-width:960px;
                margin:0 auto;
            }
            #content div{
                background:#3bbced;
                padding:30px;
            }
            #content div:nth-child(even){
                background:#777;
            }
            .one{
               /* grid-column-start: 1;
                grid-column-end: 3;*/
                grid-column:1 / 3;
            }
            .two{
               /* grid-column-start: 1;
                grid-column-end: 3;*/
                grid-column: 3/ 7;
            }
        </style>
    </head>
    <body>
        <div id="content">
            <div>one</div>
            <div>two</div>
            <div>three</div>
            <div>four</div>
            <div>five</div>
            <div>six</div>
        </div>
    </body>
</html>

->NESTED GRIDS::

<!DOCTYPE html>
<html>
    <head>
        <title>Using CSS Grid</title>
        <style>
            body{
                color: #fff;
                font-family:'Nunito Semibold';
                text-align:center;
            }
            #content{
                display:grid;
                grid-template-columns: repeat(3,1fr);
                grid-gap:10px;
                max-width:960px;
                margin:0 auto;
            }
            #content div{
                background:#3bbced;
                padding:30px;
            }
            #content div:nth-child(even){
                background:#777;
            }
            .nested{
                display:grid;
                grid-template-columns: 1fr 1fr;
                grid-gap:10px;
                grid-column: 1/4; /*or span 3; */
            }
            .nested p{
                border:1px solid #fff;
                padding:10px;
            }
        </style>
    </head>
    <body>
        <div id="content">
            <div>one</div>
            <div>two</div>
            <div>three</div>
            <div class="nested">
                <p>
                    1
                </p>
                <p>
                    2
                </p>
                <p>
                    3
                </p>
                <p>
                    4
                </p>
            </div>
            <div>five</div>
            <div>six</div>
        </div>
    </body>
</html>
->alignment of grids::

<!DOCTYPE html>
<html>
    <head>
        <title>Using CSS Grid</title>
        <style>
            body{
                color: #fff;
                font-family:'Nunito Semibold';
                text-align:center;
            }
            #content{
                display:grid;
                grid-template-columns: repeat(3,1fr);
                grid-template-rows: minmax(150px,auto);
                grid-gap:10px;
                max-width:960px;
                margin:0 auto;
               /* align-items:start;
                justify-items:end;*/
            }
            #content div{
                background:#3bbced;
                padding:30px;
            }
            #content div:nth-child(even){
                background:#777;
            }
            .one{
                justify-self:start;
                align-self: end;
            }
        </style>
    </head>
    <body>
        <div id="content">
            <div>one</div>
            <div>two</div>
            <div>three</div>
            <div>four</div>
            <div>five</div>
            <div>six</div>
        </div>
    </body>
</html>

->12 column grid system::
<!DOCTYPE html>
<html>
    <head>
        <title>Using CSS Grid</title>
        <style>
            body{
                color: #fff;
                font-family:'Nunito Semibold';
                text-align:center;
            }
            #content{
                display:grid;
                grid-template-columns: repeat(12,1fr);
                grid-auto-rows: minmax(100px,auto);
                grid-gap:10px;
                max-width:960px;
                margin:0 auto;
            }
            #content >*{
                background:#3bbced;
                padding:30px;
            }
            header{
                grid-column: 1/13;
            }
            main{
                grid-column: 4/13;
                grid-row:2/4;
            }
            aside{
                grid-column: 1/4;;
            }
            section{
                grid-column: 1/13;
                grid-row:4/6;
            }
            nav{
                grid-column: 1/4;
            }
            footer{
                grid-column: 1/13;
            }
            #grid{
                display:grid;
                position:absolute;
                top:0;
                left:0;
                grid-template-columns:repeat(12,1fr);
                grid-auto-rows:minmax(100%,auto);
                width:100%;
                height:100%;
                background:transparent;
                padding:0;
                display:none;

            }
            #grid p{
                border:1px solid;
                background:#000;
                margin:0;
                opacity:0.2;
            }
            input:checked + #content #grid{
                display:grid;
            }
        </style>
    </head>
    <body>
        <input type="checkbox"/>
        <div id="content">
            <div id="grid">
                <p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p><p></p>
            </div>
            <header>Header</header>
            <main>Main</main>
            <section>Section</section>
            <aside>Aside</aside>
            <nav>Nav</nav>
            <footer>Footer</footer>
        </div>
    </body>
</html>

->MOSAIC LAYOUT::

<!DOCTYPE html>
<html>
    <head>
        <title>Using CSS Grid</title>
        <style>
            body{
                color: #fff;
                font-family:'Nunito Semibold';
                text-align:center;
            }
            #content{
                display:grid;
                grid-template-columns: repeat(6,1fr);
                grid-auto-rows: minmax(100px,auto);
                grid-gap:10px;
                max-width:960px;
                margin:0 auto;
            }
            #content div{
                background:#333;
                padding:30px;
            }
            .one{
                grid-column: 1/3;
                grid-row: 1/5;
            }
            .two{
                grid-column: 3/7;
                grid-row: 1/3;
            }
            .three{
                grid-column: 3/5;
                grid-row: 3/5;
            }
            .four{
                grid-column: 5/7;
                grid-row: 3/7;
            }
            .five{
                grid-column:1/5 ;
                grid-row: 5/7;
            }
             #content{
                transform:rotateZ(45deg) scale(0.7);
            }
        </style>
    </head>
    <body>
        <div id="content">

        <div class="one">1</div>
        <div class="two">2</div>
        <div class="three">3</div>
        <div class="four">4</div>
        <div class="five">5</div>

        </div>
    </body>
</html>

->FLEX PROGRAMS::

<!DOCTYPE html>
<html lang="en">
  <head>
    <title>The Net Ninja - CSS Flexbox</title>
    <link rel="stylesheet" type="text/css" href="style.css">
  </head>
  <body>
    <div class="wrapper">
      <div class="flex-container">
        <div class="box one"></div>
        <div class="box two"></div>
        <div class="box three"></div>
      </div>
    </div>
  </body>
</html>

*{
    font-family: verdana;
    margin: 0;
}

body{
    background: #eee;
}

.wrapper{
    width: 100%;
    max-width: 960px;
    margin: 0 auto;
}

.flex-container{
    display:flex;
    background: yellow;
}
.box{
    height: 100px;
    min-width: 100px;
    float:left;
}
.one{
    background: red;
}
.two{
    background: blue;
}
.three{
    background: green;
}

=>FLEX GROW::
 
*{
    font-family: verdana;
    margin: 0;
}

body{
    background: #eee;
}

.wrapper{
    width: 100%;
    max-width: 960px;
    margin: 0 auto;
}

.flex-container{
    display:flex;
    background: yellow;
}
.box{
    height: 100px;
    min-width: 100px;
}
.one{
    background: red;
    flex-grow:4;
}
.two{
    background: blue;
    flex-grow:6;
}
.three{
    background: green;
    flex-grow:2;
}

->FLEX SHRINK::

*{
    font-family: verdana;
    margin: 0;
}

body{
    background: #eee;
}

.wrapper{
    width: 100%;
    max-width: 960px;
    margin: 0 auto;
}

.flex-container{
    display:flex;
    background: yellow;
    flex-wrap:wrap-reverse;
}
.box{
    height: 100px;
    min-width: 100px;
}
.one{
    background: red;
    flex-shrink:4;
}
.two{
    background: blue;
    flex-shrink:6;
}
.three{
    background: green;
    flex-shrink:2;
}

->javascript::

<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="utf-8"/>
        <title>HELLO, world</title>
    </head>
    <body>
        <script>
            alert("hello world");
            </script>

    </body>
</html>

->simple program in separate file::

<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="utf-8"/>
        <title>HELLO, world</title>
    </head>
    <body>
        <h1>JS for beginners</h1>
        <div id="content">
            <p>blah blah blah</p>
        </div>
        <script src="indextest.js">
            
            </script>

    </body>
</html>

->alert("hello world");

->javascript basic variables and datatypes::
index3.html:44 Live reload enabled.
var myVariable;
undefined
myVariable=10;
10
var myVar2="hello";
undefined
myVar2
"hello"
myVar2="world"
"world"
myVar2=5;
5
var customerAge=40;
undefined
customerAge;
40
->mathematical operators:

var myVar=5;
undefined
myVar
5
5+5
10
myVar+10
15
myVar=myVar+10;
15
5+"s"
"5s"
"hello"+" prathibha"
"hello prathibha"
5 * "hello"
NaN
->logging in to console::
 
var myVar="dog";
undefined
document.write(myVar)
undefined
console.log(myVar)
//VM238:1 dog
undefined
document.write(10)
undefined
console.log(20*5)
//VM367:1 100
undefined
->BOOLEAN IN JAVASCRIPT::

var idance=true;
undefined
idance;
true
idance=false;
false
6>2
true
2>6
false
6==6;
true
6==2
false
Boolean(6>2)
true
Boolean(-2)
true
Boolean("hello")
true
Boolean()
false

->if else ::

<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="utf-8"/>
        <title>javaScript Basics</title>
    </head>
    <body>
        
        <script src="indextest.js">
            
            </script>

    </body>
</html>

-var youdance=false;
if (youdance){
    document.write("here are the dance courses");
}else{
    document.write("join the other courses");
}
->while loops::

var myAge=22;
while (myAge <25){
    console.log("your age is less than 25")
    myAge++;
}
document.write("your age is greater than 25");

->for loops::

<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="utf-8"/>
        <title>javaScript Basics</title>
    </head>
    <body>
        <a href="a">Link 1</a>
        <a href="a">Link 2</a>
        <a href="a">Link 3</a>
        <a href="a">Link 4</a>
        <a href="a">Link 5</a>
        <a href="a">Link 6</a>
        <script src="indextest.js">
            
            </script>

    </body>
</html>

var links=document.getElementsByTagName("a");
for(i=0;i<links.length;i++){
    console.log("your link number " +i);
}
document.write("all links are looped");

->practical example for above for loop::
var links=document.getElementsByTagName("a");
for(i=0;i<links.length;i++){
    links[i].className="link" + i;
}

->FUNCTIONS SIMPLE PROGRAM::
 function getAverage(a,b){
    var average=(a+b)/2;
    console.log(average);
    return average;
}

var myRes=getAverage(10,10);
console.log("the average " +myRes);
->number::

var a="5";
var b=10;

console.log(a+b);
console.log(typeof(a+b));
console.log(Math.round(7.8));

->NaN::
var a="3";
var b=10;
if(isNaN(a)){
    console.log("wow");
}else{
    console.log("saddd");
}

->STRINGS::

var myString="ABC";
var b="abc";
console.log(myString.length);
console.log(myString.toUpperCase());
console.log(myString.toLocaleLowerCase());
console.log(myString.indexOf("string"));
console.log(myString===b);
console.log(myString<b);

->spliting and slicing strings::

var str1="hello, world";
var str2=str1.slice(2,9);
console.log(str2);
var tags="play,enjoy,work,fun,adventure";
var tagsArray=tags.split(",");
console.log(tagsArray);

->arrays::

->javascript creating objects::

var myArray=new Array();
myArray[0]=8;
myArray[1]="hello";

var mycar=new Object();
mycar.speed=60;
mycar.driver="adi";

console.log(mycar.driver);
mycar.drive=function(){
    console.log("driving");};
mycar.drive();

var mycar2={
    speed: 100, 
    driver: "adi",
    drive:function(){console.log("driving");}
    };            //shortnotation for creating objects

console.log(mycar2.speed);

var mycar3={
    speedmax: 100, 
    driver: "adi",
    drive:function(s,t){console.log(s*t);}
    };            //shortnotation for creating objects

console.log(mycar3.drive(50,4));

->this keyword::

var mycar2={
    speedmax: 100, 
    driver: "adi",
    drive:function(s,t){console.log(s*t);},
    test: function(){
        console.log(this);
    }
    };     

var mycar3={
    speedmax: 180, 
    driver: "angel",
    drive:function(s,t){console.log(s*t);},
    test: function(){
        console.log(this);
    },
    logDriver:function(){
        console.log("driver name is " +this.driver);
    }
    };
    
    mycar3.logDriver();
    mycar2.test();
    mycar3.test();
    console.log(mycar2.drive(50,4));
    console.log(mycar3.drive(20,6));

->constructor functions::

   var Car=function(maxspeed, driver){
        this.maxspeed=maxspeed;
        this.driver=driver;
        this.drive=function(s,t){
            console.log(s*t);
        };
        this.logDriver=function(){
            console.log("driver name is " +this.driver);
        };
    }

    var myCar =new Car(30,"sai");
    var myCar2=new Car(40,"neema");

    myCar.drive(30,5);
    myCar2.logDriver();

->DATE OBJECT::

 var myDate=new Date();
console.log(myDate);

-var myPastDate= new Date(1545,11,2);
var myFutureDate= new Date(2515,0,31);

console.log(myPastDate);
console.log(myFutureDate);

-var birthday = new Date(1999,0,9,12,30,50);
//0-11
console.log(birthday.getMonth());
//yyyy
console.log(birthday.getFullYear());
//1-31
console.log(birthday.getDate());
//0-6
console.log(birthday.getDay());
//0-23
console.log(birthday.getHours());
console.log(birthday.getTime());
    
-var birthday = new Date(1999,0,9,12,30,50);
var birthday2 = new Date(1999,0,9,12,30,50);
//0-11
console.log(birthday.getMonth());
//yyyy
console.log(birthday.getFullYear());
//1-31
console.log(birthday.getDate());
//0-6
console.log(birthday.getDay());
//0-23
console.log(birthday.getHours());
console.log(birthday.getTime());
    
if(birthday.getTime()==birthday2.getTime()){
    console.log("equal");
}else{
    console.log("notequal");
}

->DOM in javaScript::

->ON CLICK ::

.js file::::

var content=document.getElementById("content");
var button=document.getElementById("show-more");

button.onclick=function(){
    if(content.className=="open"){
        //shrink the box
        content.className="";
        button.innerHTML="show More";
    }else{
        //expand the box
        content.className="open";
        button.innerHTML="show Less";
    }

};


.html file:::

<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="utf-8"/>
        <title>javaScript Basics</title>
        <link href="testcss.css" rel="stylesheet" type="text/css">
    </head>
    <body>  
        <div id="content">
            <p>The HyperText Markup Language, or HTML is the standard markup language for documents designed to be displayed in a web browser. ...</p> 
            <p>HTML describes the structure of a web page semantically and originally included cues for the appearance of the document. HTML elements are the building blocks of HTML pages.</p>
            <p>The HyperText Markup Language, or HTML is the standard markup language for documents designed to be displayed in a web browser. ...</p> 
            <p>HTML describes the structure of a web page semantically and originally included cues for the appearance of the document. HTML elements are the building blocks of HTML pages.</p>
            <p>The HyperText Markup Language, or HTML is the standard markup language for documents designed to be displayed in a web browser. ...</p> 
            <p>HTML describes the structure of a web page semantically and originally included cues for the appearance of the document. HTML elements are the building blocks of HTML pages.</p>
            <p>The HyperText Markup Language, or HTML is the standard markup language for documents designed to be displayed in a web browser. ...</p> 
            <p>HTML describes the structure of a web page semantically and originally included cues for the appearance of the document. HTML elements are the building blocks of HTML pages.</p>
        </div> 
        
        <a id="show-more">Show more</a>
        <script src="indextest.js">
            
            </script>

    </body>
</html>

.css file::::

body{
    background:bisque;
}
#content{
    width:400px;
    background: #fff;
    padding:20px;
    padding-top:20px;
    font-family:calibri;
    font-size:18px;
    color:#444;
    margin:0 auto;
    max-height:270px;
    overflow:hidden;
}
#content.open{
    max-height:1000px;
}

#show-more{
    background: blueviolet;
    color:white;
    font-family: calibri;
    display:block;
    width:140px;
    font-size:24px;
    text-transform:uppercase;
    padding:10px;
    text-align:center;
    margin:20px auto;
    cursor: pointer;
}


->Window onLoad::this helps us to put script tag anywhere in html code it doesnt effect the webpage work

window.onload=function(){

    var content=document.getElementById("content");
var button=document.getElementById("show-more");

button.onclick=function(){
    if(content.className=="open"){
        //shrink the box
        content.className="";
        button.innerHTML="show More";
    }else{
        //expand the box
        content.className="open";
        button.innerHTML="show Less";
    }

};
};
      or

function setUpEvents(){

var content=document.getElementById("content");
var button=document.getElementById("show-more");

button.onclick=function(){
    if(content.className=="open"){
        //shrink the box
        content.className="";
        button.innerHTML="show More";
    }else{
        //expand the box
        content.className="open";
        button.innerHTML="show Less";
    }

};
}

window.onload=function(){
 setUpEvents();

};

->javascript timers simple program::

.html file::

<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="utf-8"/>
        <title>javaScript Basics</title>
        <link href="timer.css" rel="stylesheet" type="text/css">
        
    </head>
    <body>  
        <div id="message">
            <p>THIS IS IMPORTANT NOTIFICATION</p>
            <P>PIE IS NICE</P>
           
        </div>
        <script src="timerscript.js"></script>

    </body>
</html>

.css file::

body{
    background:bisque;
}
#message{
    width:400px;
    background: #fff;
    padding:20px;
    padding:20px;
    font-family:calibri;
    font-size:18px;
    color:#444;
    margin:0 auto;
    text-align:center;
    border:1px solid #ff7777;
    opacity:0;
    
}
#message.show{
    opacity:1;
}

.js file::

var myMessage = document.getElementById("message");
function showMessage(){
    myMessage.className="show";
}

setTimeout(showMessage, 3000);

->js timer for colour changing and stopping the colour change program::

.html file::

<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="utf-8"/>
        <title>javaScript Basics</title>
        <link href="timer.css" rel="stylesheet" type="text/css">
        
    </head>
    <body>  
        <div id="message">
            <p>THIS IS IMPORTANT NOTIFICATION</p>
            <P>PIE IS NICE</P>
        </div>
        <div id="colour-changer"></div>
        <script src="timerscript.js"></script>

    </body>
</html>

.css file::

body{
    background:bisque;
}
#message{
    width:400px;
    background: #fff;
    padding:20px;
    padding:20px;
    font-family:calibri;
    font-size:18px;
    color:#444;
    margin:0 auto;
    text-align:center;
    border:1px solid #ff7777;
    opacity:0;
    
}
#message.show{
    opacity:1;
}

#colour-changer{
    width:200px;
    height:100px;
    margin:30px auto;
    border:1px solid #000;
    background: #fff;
}


.js file::
 
var colourChanger = document.getElementById("colour-changer");
var colours=["red", "blue", "green", "pink"];
var counter=0;

function changeColour(){

    if(counter>=colours.length){
        counter=0;
    }
    colourChanger.style.background=colours[counter];
    counter++;
}

var myTimer=setInterval(changeColour,3000);

colourChanger.onclick=function(){
    clearInterval(myTimer);
    colourChanger.innerHTML="timer stopped";

}
----------------------------------------ES6--------------------------
->var hoisting::

function greetPerson(name)
{
   if(name==="chand")
   {
   var greet= "hello";
}
else
{
   var greet="hii there";
}
console.log(greet);
}
greetPerson("chand");

->let keyword::
  function greetPerson(name)
{
   let greet;
   if(name==="chand")
   {
   greet= "hello";
}
else
{
   greet="hii there";
}
console.log(greet);
}
greetPerson("chand");

->let in loop::

for(let i=1;i<=5;i++){
   setTimeout(function(){console.log(i);},1000);
}

->const keyword:

const obj1={
   name:"ram"
};
console.log(obj1.name)
obj1.name="chand";
console.log(obj1.name)
obj1.name="raj";
console.log(obj1.name);

->arrow functions::

var employee={
   id:1,
   greet:function(){
      var self=this;
      setTimeout(function(){
         console.log(self.id)},1000);
   }
};
employee.greet();

var employee={
   id:1,
   greet:function(){
      
      setTimeout(()=>{
         console.log(this.id)},1000);
   }
};
employee.greet();

->default function parameters::

let getValue=function(value=10,b=5){
   console.log(value+b);
};
getValue();
getValue(20);
getValue(20,30);
getValue(undefined,30);

o/p:: 15 
[LOG]: 25 
[LOG]: 50 
[LOG]: 40 

->let getValue=function(value=10,b=5){
   console.log(value+b);
   console.log(arguments.length);
};
getValue();
getValue(20);
getValue(20,30);
getValue(undefined,30);

output::
LOG]: 15 
[LOG]: 0 
[LOG]: 25 
[LOG]: 1 
[LOG]: 50 
[LOG]: 2 
[LOG]: 40 
[LOG]: 2 

->classes in ES6::
class Person{
   greet(){}
}
let p=new Person();
console.log(p.greet === Person.prototype.greet);

=>clases and methods::

class Person{
   constructor(name){
      this.name=name;
      console.log(this,name);
   }
}
let p= new Person("chand");

output:chand

class Person{
   constructor(name){
      this.name=name;
      console.log(this,name);
   }
   static staticMethod(){
      console.log("staticMethod");
   }
   greetPerson(){
      console.log("hello"+this.name)
   }
}
let p= new Person("chand");
Person.staticMethod();
p.greetPerson();


------------------------------------------------------REACT PROGRAMS---------------------------------------------------------------------

FUNCTIONAL COMPONENTS::

Greet.js::;

import React from 'react'

function Greet(){
    return <h1>Hello, Prathibha</h1>
}

export default Greet


->App.js::

import logo from './logo.svg';
import './App.css';
import Greet from './components/Greet'

function App() {
  return (
    <div className="App">
      <Greet/>
      
    </div>
  );
}

export default App;

output ::Hello, Prathibha


->with arrow functions::

App.js::

import logo from './logo.svg';
import './App.css';
import {Greet} from './components/Greet'

function App() {
  return (
    <div className="App">
      <Greet/>
      
    </div>
  );
}

export default App;

Greet.js::

import React from 'react'

/*function Greet(){
    return <h1>Hello, Prathibha</h1>
}*/
//name export so give extact name in app.js
export const Greet=() => <h1>Hello prathibha</h1>

//export default Greet

--------------------------------------------------------

